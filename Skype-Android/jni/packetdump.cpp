#include "tcprotoV3.hpp"
#include "bmcrypto/AttributeContainer.hpp"
#include <stdio.h>

#ifdef ANDROID
#include <android/log.h>
#define fprintf(file,fmt,args...)  __android_log_print(ANDROID_LOG_INFO, "Skype Packet", fmt, ##args)
#endif

struct _pn  {
  TCPROTO::CHUNK id;
  char *name;
} packetnames[] = {
  {TCPROTO::GETPRESENCEUPDATE,"GETPRESENCEUPDATE" },
  {TCPROTO::PRESENCEUPDATE,"PRESENCEUPDATE" },
  {TCPROTO::CHANGEONLINESTATUS,"CHANGEONLINESTATUS" },
  {TCPROTO::CONTACTONLINESTATUS,"CONTACTONLINESTATUS" },
  {TCPROTO::GETBALANCE,"GETBALANCE" },
  {TCPROTO::BALANCE,"BALANCE" },
  {TCPROTO::GETCALLHISTORY,"GETCALLHISTORY" },
  {TCPROTO::CALLHISTORY,"CALLHISTORY" },
  {TCPROTO::CALLRECORD,"CALLRECORD" },
  {TCPROTO::GETMISSEDCALLS,"GETMISSEDCALLS" },
  {TCPROTO::MISSEDCALLS,"MISSEDCALLS" },
  {TCPROTO::CLEARCALLHISTORY,"CLEARCALLHISTORY" },
  {TCPROTO::SETPSTNNUMBER,"SETPSTNNUMBER" },
  {TCPROTO::RESOLVEPSTNNUMBER,"RESOLVEPSTNNUMBER" },
  {TCPROTO::CALLINGBUDDY,"CALLINGBUDDY" },
  {TCPROTO::GETVOICEMAILS,"GETVOICEMAILS" },
  {TCPROTO::VOICEMAILS,"VOICEMAILS" },
  {TCPROTO::VOICEMAIL,"VOICEMAIL" },
  {TCPROTO::DELETEVOICEMAIL,"DELETEVOICEMAIL" },
  {TCPROTO::CONNECT,"CONNECT" },
  {TCPROTO::CONNECTED,"CONNECTED" },
  {TCPROTO::MASTERKEY,"MASTERKEY" },
  {TCPROTO::SERVERIDENTITY,"SERVERIDENTITY" },
  {TCPROTO::CLIENTDATA,"CLIENTDATA" },
  {TCPROTO::CALLSETUP,"CALLSETUP" },
  {TCPROTO::REDIRECT,"REDIRECT" },
  {TCPROTO::DISCONNECT,"DISCONNECT" },
  {TCPROTO::ERROR,"ERROR" },
  {TCPROTO::LOGIN,"LOGIN" },
  {TCPROTO::REGISTERUSER,"REGISTERUSER" },
  {TCPROTO::GETPROFILEDATA,"GETPROFILEDATA" },
  {TCPROTO::SETPROFILEDATA,"SETPROFILEDATA" },
  {TCPROTO::PROFILEDATA,"PROFILEDATA" },
  {TCPROTO::CHANGEPASSWORD,"CHANGEPASSWORD" },
  {TCPROTO::CHANGEDPASSWORD,"CHANGEDPASSWORD" },
  {TCPROTO::LOGOUT,"LOGOUT" },
  {TCPROTO::GETBUDDYLIST,"GETBUDDYLIST" },
  {TCPROTO::BUDDYLIST,"BUDDYLIST" },
  {TCPROTO::BUDDY,"BUDDY" },
  {TCPROTO::ADDCONTACT,"ADDCONTACT" },
  {TCPROTO::SENDAUTHREQUEST,"SENDAUTHREQUEST" },
  {TCPROTO::INCOMINGAUTHREQUEST,"INCOMINGAUTHREQUEST" },
  {TCPROTO::DELETECONTACT,"DELETECONTACT" },
  {TCPROTO::AUTHORIZECONTACT,"AUTHORIZECONTACT" },
  {TCPROTO::BLOCKCONTACT,"BLOCKCONTACT" },
  {TCPROTO::GETCONTACTPROPERTIES,"GETCONTACTPROPERTIES" },
  {TCPROTO::CONTACTPROPERTIES,"CONTACTPROPERTIES" },
  {TCPROTO::GETAVATAR,"GETAVATAR" },
  {TCPROTO::AVATAR,"AVATAR" },
  {TCPROTO::CONTACTSEARCH,"CONTACTSEARCH" },
  {TCPROTO::CONTACTSEARCHRESULTS,"CONTACTSEARCHRESULTS" },
  {TCPROTO::SEARCHRESULT,"SEARCHRESULT" },
  {TCPROTO::EXTENDCONTACTSEARCH,"EXTENDCONTACTSEARCH" },
  {TCPROTO::ENDCONTACTSEARCH,"ENDCONTACTSEARCH" },
  {TCPROTO::GETRECENTCHATS,"GETRECENTCHATS" },
  {TCPROTO::RECENTCHATS,"RECENTCHATS" },
  {TCPROTO::GETBOOKMARKEDCHATS,"GETBOOKMARKEDCHATS" },
  {TCPROTO::BOOKMARKEDCHATS,"BOOKMARKEDCHATS" },
  {TCPROTO::GETUNREADCHATS,"GETUNREADCHATS" },
  {TCPROTO::UNREADCHATS,"UNREADCHATS" },
  {TCPROTO::CHATRECORD,"CHATRECORD" },
  {TCPROTO::GETCHATINFO,"GETCHATINFO" },
  {TCPROTO::CHATINFO,"CHATINFO" },
  {TCPROTO::GETCHATMESSAGES,"GETCHATMESSAGES" },
  {TCPROTO::CHATMESSAGES,"CHATMESSAGES" },
  {TCPROTO::CHATMESSAGE,"CHATMESSAGE" },
  {TCPROTO::SENDCHATMESSAGE,"SENDCHATMESSAGE" },
  {TCPROTO::CREATECHATWITHUSER,"CREATECHATWITHUSER" },
  {TCPROTO::CREATEDCHAT,"CREATEDCHAT" },
  {TCPROTO::ADDCHATMEMBERS,"ADDCHATMEMBERS" },
  {TCPROTO::LEAVECHAT,"LEAVECHAT" },
  {TCPROTO::SETCHATTOPIC,"SETCHATTOPIC" },
  {TCPROTO::SENDSMS,"SENDSMS" },
  {TCPROTO::LOGGEDIN,"LOGGEDIN" },
  {TCPROTO::LOGGEDOUT,"LOGGEDOUT" },
  {TCPROTO::USEPSTNNUMBER,"USEPSTNNUMBER" },
  {TCPROTO::SAVEDATA,"SAVEDATA" },
  {TCPROTO::USERDATA,"USERDATA" },
  {TCPROTO::WARNING,"WARNING" },
  {TCPROTO::GIVEDISPLAYNAME,"GIVEDISPLAYNAME" },
  {TCPROTO::PRESENCESETTINGS,"PRESENCESETTINGS" },
  {TCPROTO::LISTENVOICEMAIL,"LISTENVOICEMAIL" },
  {TCPROTO::BOOKMARKCHAT,"BOOKMARKCHAT" },
  {TCPROTO::MARKCHATSREAD,"MARKCHATSREAD" },
  {TCPROTO::MARKEDCHATSREAD,"MARKEDCHATSREAD" },
};

struct _an {
  TCPROTO::ATTRKEY id;
  char *name;
} attributenames[] = {
  {TCPROTO::ATTR_ROOT_PRIVATE_KEY,"ATTR_ROOT_PRIVATE_KEY" },
  {TCPROTO::ATTR_ROOT_PUBLIC_KEY,"ATTR_ROOT_PUBLIC_KEY" },
  {TCPROTO::ATTR_SERVER_PRIVATE_KEY,"ATTR_SERVER_PRIVATE_KEY" },
  {TCPROTO::ATTR_SERVER_PUBLIC_KEY,"ATTR_SERVER_PUBLIC_KEY" },
  {TCPROTO::ATTR_SERVER_SIGNED_PUBLIC_KEY,"ATTR_SERVER_SIGNED_PUBLIC_KEY" },
  {TCPROTO::PACKETTYPE,"PACKETTYPE" },
  {TCPROTO::BUDDYINDEX,"BUDDYINDEX" },
  {TCPROTO::TIMESTAMP,"TIMESTAMP" },
  {TCPROTO::SKYPENAME,"SKYPENAME" },
  {TCPROTO::FULLNAME,"FULLNAME" },
  {TCPROTO::CONTACTAVAILABILITY,"CONTACTAVAILABILITY" },
  {TCPROTO::BOOKMARK,"BOOKMARK" },
  {TCPROTO::ONLINESTATUSES,"ONLINESTATUSES" },
  {TCPROTO::RECORDCOUNT,"RECORDCOUNT" },
  {TCPROTO::BALANCE_CURRENCY,"BALANCE_CURRENCY" },
  {TCPROTO::BALANCE_AMOUNT,"BALANCE_AMOUNT" },
  {TCPROTO::POLL_INITIATOR,"POLL_INITIATOR" },
  {TCPROTO::NOTIFY_NODES,"NOTIFY_NODES" },
  {TCPROTO::CALLTARGET,"CALLTARGET" },
  {TCPROTO::CHAT,"CHAT" },
  {TCPROTO::CHAT_FRIENDLYNAME,"CHAT_FRIENDLYNAME" },
  {TCPROTO::UNREAD_MSGS,"UNREAD_MSGS" },
  {TCPROTO::CHAT_NAME,"CHAT_NAME" },
  {TCPROTO::ACTIVITY_TIMESTAMP,"ACTIVITY_TIMESTAMP" },
  {TCPROTO::TYPE,"TYPE" },
  {TCPROTO::MEMBERS,"MEMBERS" },
  {TCPROTO::TOPIC,"TOPIC" },
  {TCPROTO::CHATMSG_BODY,"CHATMSG_BODY" },
  {TCPROTO::CHATMSG_LEAVEREASON,"CHATMSG_LEAVEREASON" },
  {TCPROTO::CLIENTCHATID,"CLIENTCHATID" },
  {TCPROTO::AUTHMSG,"AUTHMSG" },
  {TCPROTO::AUTHORIZATIONTYPE,"AUTHORIZATIONTYPE" },
  {TCPROTO::PSTNNUMBERS,"PSTNNUMBERS" },
  {TCPROTO::SMS_MESSAGE,"SMS_MESSAGE" },
  {TCPROTO::BIRTHDAY,"BIRTHDAY" },
  {TCPROTO::GENDER,"GENDER" },
  {TCPROTO::LANGUAGES,"LANGUAGES" },
  {TCPROTO::COUNTRY,"COUNTRY" },
  {TCPROTO::PROVINCE,"PROVINCE" },
  {TCPROTO::CITY,"CITY" },
  {TCPROTO::PHONE_HOME,"PHONE_HOME" },
  {TCPROTO::PHONE_OFFICE,"PHONE_OFFICE" },
  {TCPROTO::PHONE_MOBILE,"PHONE_MOBILE" },
  {TCPROTO::EMAILS,"EMAILS" },
  {TCPROTO::HOMEPAGE,"HOMEPAGE" },
  {TCPROTO::ABOUT,"ABOUT" },
  {TCPROTO::MOOD_TEXT,"MOOD_TEXT" },
  {TCPROTO::TIMEZONE,"TIMEZONE" },
  {TCPROTO::CONTACTCAPABILITIES,"CONTACTCAPABILITIES" },
  {TCPROTO::NROF_AUTHED_BUDDIES,"NROF_AUTHED_BUDDIES" },
  {TCPROTO::IPCOUNTRY,"IPCOUNTRY" },
  {TCPROTO::UNDER_LEGAL_AGE,"UNDER_LEGAL_AGE" },
  {TCPROTO::SKYPEIN_NUMBERS,"SKYPEIN_NUMBERS" },
  {TCPROTO::OFFLINE_CALLFORWARD,"OFFLINE_CALLFORWARD" },
  {TCPROTO::CHAT_POLICY,"CHAT_POLICY" },
  {TCPROTO::SKYPE_CALL_POLICY,"SKYPE_CALL_POLICY" },
  {TCPROTO::PSTN_CALL_POLICY,"PSTN_CALL_POLICY" },
  {TCPROTO::AVATAR_POLICY,"AVATAR_POLICY" },
  {TCPROTO::BUDDYCOUNT_POLICY,"BUDDYCOUNT_POLICY" },
  {TCPROTO::TIMEZONE_POLICY,"TIMEZONE_POLICY" },
  {TCPROTO::WEBPRESENCE_POLICY,"WEBPRESENCE_POLICY" },
  {TCPROTO::SESSION_ID,"SESSION_ID" },
  {TCPROTO::MAXENTRIES,"MAXENTRIES" },
  {TCPROTO::MAXRECORDS,"MAXRECORDS" },
  {TCPROTO::PASSWORD,"PASSWORD" },
  {TCPROTO::DEVICE_PSTNNUMBER,"DEVICE_PSTNNUMBER" },
  {TCPROTO::EMAIL,"EMAIL" },
  {TCPROTO::AVATARIMAGE,"AVATARIMAGE" },
  {TCPROTO::AVATARWIDTH,"AVATARWIDTH" },
  {TCPROTO::AVATARHEIGHT,"AVATARHEIGHT" },
  {TCPROTO::SEARCHSTRING,"SEARCHSTRING" },
  {TCPROTO::SEARCH_ID,"SEARCH_ID" },
  {TCPROTO::VMINDEX,"VMINDEX" },
  {TCPROTO::SUBJECT,"SUBJECT" },
  {TCPROTO::DURATION,"DURATION" },
  {TCPROTO::PROTOCOLVERSION,"PROTOCOLVERSION" },
  {TCPROTO::CLIENT_RANDOM,"CLIENT_RANDOM" },
  {TCPROTO::PLATFORMID,"PLATFORMID" },
  {TCPROTO::SERVER_RANDOM,"SERVER_RANDOM" },
  {TCPROTO::SECRETMASTER,"SECRETMASTER" },
  {TCPROTO::CAPABILITIES,"CAPABILITIES" },
  {TCPROTO::LANGUAGE,"LANGUAGE" },
  {TCPROTO::SERVER_PUBLIC_KEY,"SERVER_PUBLIC_KEY" },
  {TCPROTO::CRYPTO_SETUP,"CRYPTO_SETUP" },
  {TCPROTO::SERVER_CRYPTO_KEY,"SERVER_CRYPTO_KEY" },
  {TCPROTO::CLIENT_PRIVATE_IP_ADDRESS,"CLIENT_PRIVATE_IP_ADDRESS" },
  {TCPROTO::CLIENT_CRYPTO_KEY,"CLIENT_CRYPTO_KEY" },
  {TCPROTO::CLIENT_PUBLIC_IP_ADDRESS,"CLIENT_PUBLIC_IP_ADDRESS" },
  {TCPROTO::LATEST_VERSION,"LATEST_VERSION" },
  {TCPROTO::UPGRADEURL,"UPGRADEURL" },
  {TCPROTO::SERVER_NAME,"SERVER_NAME" },
  {TCPROTO::SERVER_IDENTITY,"SERVER_IDENTITY" },
  {TCPROTO::CALLMETHOD,"CALLMETHOD" },
  {TCPROTO::DIALIN_NUMBER_PREFIX,"DIALIN_NUMBER_PREFIX" },
  {TCPROTO::DIALIN_NUMBER_RANGE_SIZE,"DIALIN_NUMBER_RANGE_SIZE" },
  {TCPROTO::VOICEMAIL_NUMBER_PREFIX,"VOICEMAIL_NUMBER_PREFIX" },
  {TCPROTO::VOICEMAIL_NUMBER_RANGE_SIZE,"VOICEMAIL_NUMBER_RANGE_SIZE" },
  {TCPROTO::NEW_SERVER,"NEW_SERVER" },
  {TCPROTO::ERROR_CODE,"ERROR_CODE" },
  {TCPROTO::ERROR_MESSAGE,"ERROR_MESSAGE" },
  {TCPROTO::ALLOWSPAM,"ALLOWSPAM" },
  {TCPROTO::NEWPASSWORD,"NEWPASSWORD" },
  {TCPROTO::VMRECORDS,"VMRECORDS" },
  {TCPROTO::BUDDYRECORDS,"BUDDYRECORDS" },
  {TCPROTO::BUDDYLIST_STATUS,"BUDDYLIST_STATUS" },
  {TCPROTO::SEARCHRESULTRECORDS,"SEARCHRESULTRECORDS" },
  {TCPROTO::SEARCH_STATUS,"SEARCH_STATUS" },
  {TCPROTO::CHATRECORDS,"CHATRECORDS" },
  {TCPROTO::CHAT_RECORD,"CHAT_RECORD" },
  {TCPROTO::CHATMSG_RECORDS,"CHATMSG_RECORDS" },
  {TCPROTO::CALLRECORDS,"CALLRECORDS" },
  {TCPROTO::CHATMSG_TYPE,"CHATMSG_TYPE" },
  {TCPROTO::CHATMSG_STATUS,"CHATMSG_STATUS" },
  {TCPROTO::PROFILE_TIMESTAMP,"PROFILE_TIMESTAMP" },
  {TCPROTO::CALLPSTNNUMBER,"CALLPSTNNUMBER" },
  {TCPROTO::AUTOSYNC,"AUTOSYNC" },
  {TCPROTO::UNREAD_COUNT,"UNREAD_COUNT" },
  {TCPROTO::SAVEPASSWORD,"SAVEPASSWORD" },
  {TCPROTO::SAVEDDATA,"SAVEDDATA" },
  {TCPROTO::LOCALPRIVS,"LOCALPRIVS" },
  {TCPROTO::CREDENTIALS,"CREDENTIALS" },
  {TCPROTO::NODEID,"NODEID" },
  {TCPROTO::SDFSESSIONID,"SDFSESSIONID" },
  {TCPROTO::ENCRYPTED_USERDATA,"ENCRYPTED_USERDATA" },
  {TCPROTO::LOGOUTREASON,"LOGOUTREASON" },
  {TCPROTO::SUGGESTED_SKYPENAMES,"SUGGESTED_SKYPENAMES" },
  {TCPROTO::CALLMETHODS,"CALLMETHODS" },
  {TCPROTO::DEVICE_MCC,"DEVICE_MCC" },
  {TCPROTO::DEVICE_MNC,"DEVICE_MNC" },
  {TCPROTO::HOME_MCC,"HOME_MCC" },
  {TCPROTO::HOME_MNC,"HOME_MNC" },
  {TCPROTO::WARNING_CODE,"WARNING_CODE" },
  {TCPROTO::WARNING_MESSAGE,"WARNING_MESSAGE" },
  {TCPROTO::HELP_URL,"HELP_URL" },
  {TCPROTO::SI_GATEWAY_NAME,"SI_GATEWAY_NAME" },
  {TCPROTO::SI_GATEWAY_NUMBER,"SI_GATEWAY_NUMBER" },
  {TCPROTO::SO_ENABLED,"SO_ENABLED" },
  {TCPROTO::CALLING_URI_EXTENSIONS_ENABLED,"CALLING_URI_EXTENSIONS_ENABLED" },
  {TCPROTO::PUSHIDENTIFIER,"PUSHIDENTIFIER" },
  {TCPROTO::DISPLAYNAME,"DISPLAYNAME" },
  {TCPROTO::FG_POLL_INTERVAL,"FG_POLL_INTERVAL" },
  {TCPROTO::BG_POLL_INTERVAL,"BG_POLL_INTERVAL" },
  {TCPROTO::CLIENTSTATE,"CLIENTSTATE" },
  {TCPROTO::SETBOOKMARK,"SETBOOKMARK" },
  {TCPROTO::SERVER_UTC_TIME,"SERVER_UTC_TIME" },
  {TCPROTO::REQUEST_ID,"REQUEST_ID" },
  {TCPROTO::SUBSCRIPTION_ERROR_MESSAGE,"SUBSCRIPTION_ERROR_MESSAGE" },
  {TCPROTO::SUBSCRIPTION_LSK,"SUBSCRIPTION_LSK" },
  {TCPROTO::SUBSCRIPTION_URL,"SUBSCRIPTION_URL" },
  {TCPROTO::UPGRADE_MESSAGE,"UPGRADE_MESSAGE" },
  {TCPROTO::UPGRADE_LSK,"UPGRADE_LSK" },
  {TCPROTO::CHATS,"CHATS" },
  {TCPROTO::POLL_TARGET,"POLL_TARGET" },
  {TCPROTO::POLL_COOKIE,"POLL_COOKIE" },
};

char *GetAttributeName(int id)
{
uint i;
  for (i=0;i<(sizeof(attributenames)/sizeof(attributenames[0]));i++) {
    if (attributenames[i].id==id)
      return attributenames[i].name;
  }
  return "unknown";

}

char *GetPacketName(int id)
{
uint i;
  for (i=0;i<(sizeof(packetnames)/sizeof(packetnames[0]));i++) {
    if (packetnames[i].id==id)
      return packetnames[i].name;
  }
  return "unknown";
}

void AttributeContainerDump(const AttributeContainer& a,int level)
{
uint i;
const AttributeContainer::Attribute *at;
Address adr;
uchar *s;
uint l;
const uint *ia;
char pad[128];
  sprintf(pad,"%*s",level,"");
  for (i=0;i<a.AttributeCount();i++) {
    at=a.GetAttribute(i);
    fprintf(stderr,"%s#%d  ",pad,at->GetKey());
    switch(at->GetType()) {
      case ATTRTYPE_INTEGER:
          fprintf(stderr,"Int (%u)\n",at->GetInteger());
          break;
      case ATTRTYPE_INT64:
          fprintf(stderr,"Int64 (%llu)\n",at->GetInt64());
          break;
      case ATTRTYPE_ADDRESS:
          adr=at->GetAddress();
          fprintf(stderr,"Address (%d.%d.%d.%d:%u)\n",
            (adr.IPAddress>>24)&255,
            (adr.IPAddress>>16)&255,
            (adr.IPAddress>>8)&255,
            (adr.IPAddress)&255,
            adr.Port);              
          break;
      case ATTRTYPE_STRING:
          fprintf(stderr,"String (%s)\n",at->GetString());
          break;
      case ATTRTYPE_BINARY:
          s=(uchar *)at->GetBinary(l);
          fprintf(stderr,"Binary (");
          while (l--) {
            //fprintf(stderr,"%02x%s",*s++,l?" ":"");
          }
          fprintf(stderr,")\n");
          break;
      case ATTRTYPE_CONTAINER:
          fprintf(stderr,"Container\n");
          AttributeContainerDump(at->GetContainer(),level+1);
          break;
      case ATTRTYPE_INTARRAY:
          ia=at->GetIntArray(l);
          fprintf(stderr,"Intarray (");
          while (l--) {
            fprintf(stderr,"%u%s",*ia++,l?" ":"");
          }
          fprintf(stderr,")\n");
          break;
    }
  }
}

void PacketDump(const char *title,const AttributeContainer& a,int level)
{
uint i;
const AttributeContainer::Attribute *at;
Address adr;
uchar *s;
uint l;
const uint *ia;
char pad[128];
  sprintf(pad,"%*s",level,"");
  fprintf(stderr,"%s%s\n",pad,title);
  level++;
  sprintf(pad,"%*s",level,"");
  for (i=0;i<a.AttributeCount();i++) {
    at=a.GetAttribute(i);
    if (level==2 || at->GetType()!=ATTRTYPE_CONTAINER)
      fprintf(stderr,"%s#%d %s ",pad,at->GetKey(),GetAttributeName(at->GetKey()));
    else
      fprintf(stderr,"%s#%d ",pad,at->GetKey());
    if (at->GetKey()==TCPROTO::PACKETTYPE && at->GetType()!=ATTRTYPE_CONTAINER)
      fprintf(stderr,"Integer (%d) - %s\n",at->GetInteger(),GetPacketName(at->GetInteger()));
    else {
      switch(at->GetType()) {
        case ATTRTYPE_INTEGER:
            fprintf(stderr,"Integer (%u)\n",at->GetInteger());
            break;
        case ATTRTYPE_INT64:
            fprintf(stderr,"Int64 (%llu)\n",at->GetInt64());
            break;
        case ATTRTYPE_ADDRESS:
            adr=at->GetAddress();
            fprintf(stderr,"Address (%d.%d.%d.%d:%u)\n",
              (adr.IPAddress>>24)&255,
              (adr.IPAddress>>16)&255,
              (adr.IPAddress>>8)&255,
              (adr.IPAddress)&255,
              adr.Port);              
            break;
        case ATTRTYPE_STRING:
            fprintf(stderr,"String (%s)\n",at->GetString());
            break;
        case ATTRTYPE_BINARY:
            s=(uchar *)at->GetBinary(l);
            fprintf(stderr,"Binary (");
            while (l--) {
              //fprintf(stderr,"%02x%s",*s++,l?" ":"");
            }
            fprintf(stderr,")\n");
            break;
        case ATTRTYPE_CONTAINER:
            PacketDump("Subcontainer",at->GetContainer(),level+1);
            break;
        case ATTRTYPE_INTARRAY:
            ia=at->GetIntArray(l);
            fprintf(stderr,"Intarray [%d] (",l);
            while (l--) {
              fprintf(stderr,"%u%s",*ia++,l?" ":"");
            }
            fprintf(stderr,")\n");
            break;
      }
    }
    fflush(stderr);
  }
}
